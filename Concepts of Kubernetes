yum update -y

kubectl :::
   It will interface the user and kubernetes.
kubectl [command] [type] [name] [config name]
The kubernetes objects can be created using kubectl adhoc commands(not reusable)/ using Manifest file(reusable) ex: *.yaml file.


Pods :::
   (Application programming interface)
   api version: v1 -->pods
   api version: Group_Name/version_number
   kind:

Controller Objects :::
   Replicasets:: It will manage the pod lifecycle and It is a lower-level abstraction that provides basic scaling mechanisms. The manifest file has a selector: matchLabels: part
   Replication controllers:: key feature of kubernetes and manages the pod lifecycle. The manifest file has a selector: only.
   Daemonsets
   Deployments:: It provides higher-level of abstractions and additional features such as rolling update and rollbacks and versioning of applications are available.

Diff between replication controller and replicas set :::
## replicaset supports only the set-based selectors whereas the replication controller supports the equality-based selectors.
## replication controller allows rolling-update command whereas the replicaset can not.

Volumes ::: gives persistence to the pods.
   emptyDir:: Default volume. Temporary space, if the pod gets deleted, the volume gets deleted.
   
   config-Map/secrets::
    It is a file which will talk about the configuration required to run a pod in a particular environment. environments- QA,UAT Production..etc.,
    secrets are used to maintain sensitive data. (Credentials/ userId/password/token/keys)
    configmaps are used to maintain the nonsensitive data.
    1. create a configmap volume in the cluster level and include the files into it.
    2. create a volume in the pod with /etc/non-sensitive-data.
    image of application + configmapfile-----> deploy into the particular environment which will gives the pod along with the configuration files.
    secrets:: very similar to the config-map,except in the manifest file we should give secretName: not simply name:


   Host path::
      create a volume in a pod and create a volume in the pod-created respective worker node, and configure both in order to save the pod data wisely.
      This is on the host machine level. and smaller-scale industry


For large-scale industry
   1. Admin registers storage classes
   2. developer creates a claim
   3. After approving the claim developer will use the storage.
   persistent:: a piece of storage in the cluster.    provisioning--->Binding----> Using-----> Reclaiming. (SSD-fast, HDD-slow, glusterFS-Distributed NFS, OBJECT - Storage types)
      provisioning types:
         Static(pv needs to be created before pvc)
         Dynamic(pv is created at the same time as pvc)
   persistent volume claim:: Request for storage from application owners to storage admins in order to allocate the volume for the application.
Services:::
   Nodeport- 30000-32767********
   service port- it should be the same as the pod port.
   Targetport- pod port.
   pod ---> Active Container 
            Passive Container
Load balancer:::
   basically routes the users to the pods with the load balancer service and nodeport service. when the pods are exposed and replicated on different working nodes.
Troubleshoot the issues!
Kubernetes Security! Role Based Access Control 
RBAC divided into the
Role decides what can be done. Subject decides who can do it.
Namespaced----> role, role binding ( Admin, Developer, Default ) 
cluster wide----> cluster role, cluster role binding
Actions: Get, Create, Update, Delete, Patch.

Helm::: package manager for Kubernetes. which help to automatically create manifest files for any Kubernetes objects in the form of HELM Charts. 
Loadbalancer::: It can only route traffic to only one service and it is an external service to the cluster. It is costlier.
Ingress::: (the act of going in) It can route traffic to  multiple services at a time and cheap
   Ingress controller--> software(nginx, contour, traefik, haproxy)
   Ingress resource ---> Defining Rules in Yml file.
   Ingress rules:
      host base      path base     backend(servicename:port)

User----->LoadBalancer(provides single public ip for all services)----> Ingress controller----->workernodes

Integration of jenkins with Kubernetes :::
Total 5 instances
create an instance for jenkins master, jenkins slave
create an instance for kubernetes master, kubernetes worker node-1, kubernetes worker node-2











nodeSelector::: customized pod allocation on worker nodes based on the node label.



















Display Commands :::
kubectl get pods --show-labels  --->to show labels

Deleting Commands :::
kubectl delete pods -l key=value -----> deleting pods based upon the label and its value
kubectl delete rs -l key=value
kubectl delete rc -l key=value
kubectl delete deployment -l key=value
