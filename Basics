Kubernetes:
 > Kubernetes Orchestrates the containers on multiple host servers. 
 > It will control and automates the deployments and updates.
 > It can scale up or down the containerized applications and it's resources
 > Direct management of servers, which guarantees the running applications are the same as the desired 
   applications.
 
A Kubernetes cluster basically consists of a control panel and computing machine:
1. Control panel
   > API(Application Program Interface) Server: It is the primary access point for  cluster-level administrative operations.
   > Controller: Deployment, Replica set, NodeController.
                 It is responsible for the control process. Where the desired number of replicas is
                 the same as that of the created count and the desired nodes are equal to the 
                 currently working nodes. Lifecycle functions and desired state, Watch and update API Server
   > Scheduler: It is an intelligent block. When API Server receives a request for pod creation, the 
                schedular will quickly fetch the node information and schedules the pod creation
                according to the node's availability. 
   > etcd: It is a key-value storage of the cluster data. It helps the scheduler and controller with the 
           availability of resources and cluster state changes.
   > kubectl: It will interact with the API Server in order to retrieve the information.
2. Compute machine
   > kubelet: The kubelet has the responsibility for starting up pods on the node. It is a node agent 
              which communicates with the master node and executes the tasks taken from
              the API Server, if there is any issue while creating a pod it will restart the creation of
              the pod and if there is an issue with the worker node, then API Server will detect the issue
              and will shift container creation to another worker node.
   > Kubeproxy: It is the core networking component inside the Kubernetes cluster it maintains the entire
                network configuration. Manages the network routing for TCP and UDP packets and allows the
                users to connect servers through the network.[Responsible for pod networking and implementing
                our services abstraction on the node itself, it does the load balancing of pods traffic]
   > Container run time: It will pull the image from the container registry and provide an execution environment
                and the pod abstraction runtime is needed to run the application containers running on pods
                inside a pod     Ex:-  Docker.
   > Container run d: will allocate the container run time tools

Cluster Add-on Pods:
   > DNS: it will store the pods, and service addresses with the DNS Server when they're created.
   > Ingris: It is an essential advanced HTTP or layer 7 load
   > Dashboard: It is a web-based administration Kubernetes cluster. 
   
 Docker is a container creation tool. Whereas Kubernetes is also a
 container creation tool along with that it will allocate them on different virtual machines which is not
 possible with docker. Kubernetes controls the cluster in the form of Master and Worker nodes. There will
 be only one unique master node.

1. creating pods
2. performing deployment configuration(In order to have multiple replica sets)
3. Services (Services add a layer of abstraction over the pods)

kubectl Commands:
create
Get
Run 
Expose
Delete
Apply
Edit
kubectl cluster-info
kubectl get pods
kubectl get nodes
kubectl get services
kubectl apply -f podname
kubectl get rs ---> To get replica set details
kubectl get resourceType
kubectl run name --image=imagename
kubectl describe pod podname
kubectl exec -it podname:containername bin/bash (it-Interactive Terminal)
exit
kubectl logs podname
kubectl api-resources- gives the list of api-versions

1. stateful application - where application state is exist( it consist of ID to retrieve the information back even if the application is get deleted)
2. stateless application

initcontainerdemo:
> This is the container that executes before the main container. Unless the initcontainer gets passed successfully, the main container is not going to create.
> container consists of scripts in the form of HTML files.

Namespace: It is a logical entity. It can restrict the user from using the pods.
kubectl get ns
kubectl get pods -namespace=somename
kubectl create namespace somename

labels: Where we will different kinds of objects to specify the pods 

selectors:
equality based selectors: ==, !=
set-based selectors: in, notin, exists


Networking:
Container Network Model: used for the Docker
Container Network interface: used for Kubernetes: here we can use multiple container run time tools( Docker, Calico...etc.,)
These are different in terms of the Architecture
Calico is a CNI plugin for Kubernetes that enables network policies and networking on Kubernetes clusters.

Services: Services allow the user to abstract the cluster and pod details. Since there is a chance of change in the
pod IP spontaneously with restarting, therefore user can't abstract the pod details. Hence, the services will have a constant
relationship with the pod in such a way that, though the pod IP changes it will allow the user to abstract the pod content.

Types of Services:

1. Cluster IP(Internal): It allows the pods to communicate internally.
Format:
apiVersion: v1
kind: Service
metadata: 
  name: mysvc ## Name of the service
spec:
  type: ClusterIP
  selector:
    app: nginx
  ports:
    - targetPort: 80 ##Service object port details
      port: 80 ##containers port details.

2. Nodeport: This service communicates between the user and the frontend app or service
kubectl expose deployment nginx-deployment(deploymentfilename) --type=LoadBalancer --name=my-service(some service name)

Controllers:
1. Replicaset
2. Replicacontroller
3. Deployment: Deployment is the evolution of replicaset.
4. Daemonset: If we want to have the pods on the multiple nodes, daemonset will help on it.
5. TTL Controller (alpha)
6. jobs


Load Balancers
self-Healing Applications:
1. Liveness probe(1.exec, 2. http get, 3. tcp socket are used to check the application health in the pod)
2. Readiness probe
pod-scheduling
Resource QoS
Running Multiple Schedulers

































































